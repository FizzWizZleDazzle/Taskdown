name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check and Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          backend/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Check compilation
      working-directory: ./backend
      run: cargo check --all-targets --all-features
      
    - name: Check formatting
      working-directory: ./backend
      run: |
        if ! cargo fmt --all -- --check; then
          echo "‚ùå Code formatting issues found. Please run 'cargo fmt' to fix formatting."
          exit 1
        else
          echo "‚úÖ Code formatting looks good!"
        fi
      
    - name: Run Clippy (linting)
      working-directory: ./backend
      run: cargo clippy --all-targets --all-features -- -A dead_code -A unused_variables -A unused_imports
      
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          backend/target/
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('backend/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-
          
    - name: Run tests
      working-directory: ./backend
      run: cargo test --all-features --bins
      
    - name: Run doc tests
      working-directory: ./backend
      run: cargo test --doc || echo "No doc tests found"
      
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit || echo "‚ö†Ô∏è  Could not install cargo-audit, skipping security audit"
      
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('backend/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-audit-
          ${{ runner.os }}-cargo-
          
    - name: Run security audit
      working-directory: ./backend
      run: |
        if command -v cargo-audit >/dev/null 2>&1; then
          # Ignore RUSTSEC-2023-0071 (RSA vulnerability in sqlx-mysql)
          # We only use SQLite and don't utilize MySQL functionality
          cargo audit --ignore RUSTSEC-2023-0071
        else
          echo "‚ö†Ô∏è  cargo-audit not available, skipping security audit"
          echo "üí° Install locally with: cargo install cargo-audit"
        fi
      
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          backend/target/
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('backend/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-
          ${{ runner.os }}-cargo-
          
    - name: Build release
      working-directory: ./backend
      run: cargo build --release --all-features
      
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-binary
        path: backend/target/release/taskdown-backend
        retention-days: 1